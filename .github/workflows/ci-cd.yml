name: CI/CD Pipeline
on: [push, pull_request]

jobs:
  Test:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ ping: 1 })'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            auth/node_modules
            product/node_modules
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Create .env files
        run: |
          echo "MONGODB_AUTH_URI=${{ secrets.MONGODB_AUTH_URI  }}" >> auth/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> auth/.env
          echo "MONGODB_PRODUCT_URI=${{ secrets.MONGODB_PRODUCT_URI }}" >> product/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> product/.env
          echo "LOGIN_TEST_USER=${{ secrets.LOGIN_TEST_USER }}" >> product/.env
          echo "LOGIN_TEST_PASSWORD=${{ secrets.LOGIN_TEST_PASSWORD }}" >> product/.env

      - name: Install dependencies
        run: |
          cd auth && npm ci
          cd ../product && npm ci
          cd .. && npm ci

      - name: Wait for MongoDB to be ready
        run: |
          echo "Waiting for MongoDB to be ready..."
          for i in {1..10}; do
            mongosh --host mongodb --eval "db.adminCommand({ ping: 1 })" && echo "MongoDB is ready!" && break
            echo "MongoDB not ready yet, waiting 3s..."
            sleep 3
          done

      - name: Run auth tests
        run: |
          cd auth
          npm test
      - name: Start auth service for integration tests
        run: |
          cd auth
          npm start &
          npx wait-on http://localhost:3000/auth --timeout 30000
      - name: Run Product Tests
        run: |
          cd product
          npm test
          cd ..
      - name: Cleanup
        if: always()
        run: pkill -f "node" || true
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create .env file
        run: |
          echo "MONGODB_AUTH_URI=${{ secrets.MONGODB_AUTH_URI }}" >> auth/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> auth/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> product/.env
          echo "MONGODB_PRODUCT_URI=${{ secrets.MONGODB_PRODUCT_URI }}" >> product/.env
          echo "LOGIN_TEST_USER=${{ secrets.LOGIN_TEST_USER }}" >> product/.env
          echo "LOGIN_TEST_PASSWORD=${{ secrets.LOGIN_TEST_PASSWORD }}" >> product/.env

      - name: Build & Push all service images
        run: |
          docker build -t trinhvanvu/api-gateway:latest -t trinhvanvu/api-gateway:${{ github.sha }} ./api-gateway
          docker push trinhvanvu/api-gateway:latest
          docker push trinhvanvu/api-gateway:${{ github.sha }}

          docker build -t trinhvanvu/auth:latest -t trinhvanvu/auth:${{ github.sha }} ./auth
          docker push trinhvanvu/auth:latest
          docker push trinhvanvu/auth:${{ github.sha }}

          docker build -t trinhvanvu/order:latest -t trinhvanvu/order:${{ github.sha }} ./order
          docker push trinhvanvu/order:latest
          docker push trinhvanvu/order:${{ github.sha }}

          docker build -t trinhvanvu/product:latest -t trinhvanvu/product:${{ github.sha }} ./product
          docker push trinhvanvu/product:latest
          docker push trinhvanvu/product:${{ github.sha }}

  deploy:
    name: Deploy on Localhost (Docker Desktop)
    needs: build-and-push
    runs-on: self-hosted

    steps:
      - name: Deploy with Docker Compose
        run: |
          cd "D:\DAIHOC\NAM4\TAILIEU\LTHDV\THUCHANH\22685821-TrinhVanVu-EProject1\22685821-TrinhVanVu-EProject-main"
          docker-compose down --remove-orphans
          docker-compose pull
          docker-compose up -d
          docker ps
