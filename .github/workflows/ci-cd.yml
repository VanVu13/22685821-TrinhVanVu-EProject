name: CI/CD Pipeline

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:6.0
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env files for testing
        run: |
          # auth
          echo "PORT=3002" > auth/.env
          echo "MONGODB_AUTH_URI=${{ secrets.MONGODB_AUTH_URI  }}" >> auth/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> auth/.env

          # product
          echo "PORT=3003" > product/.env
          echo "MONGODB_PRODUCT_URI=${{ secrets.MONGODB_PRODUCT_URI }}" >> product/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> product/.env
          echo "LOGIN_TEST_USER=${{ secrets.LOGIN_TEST_USER }}" >> product/.env
          echo "LOGIN_TEST_PASSWORD=${{ secrets.LOGIN_TEST_PASSWORD }}" >> product/.env

      - name: Install dependencies
        run: |
          cd auth && npm ci && cd ..
          cd product && npm ci && cd ..
          npm ci

      # Chờ MongoDB sẵn sàng
      - name: Wait for MongoDB
        run: npx wait-on tcp:mongo:27017

      # Start auth server
      - name: Start auth server
        run: |
          cd auth
          npm start &

      # Chờ auth server listen xong
      - name: Wait for auth server
        run: npx wait-on http://auth:3000
      

      - name: Run tests for auth
        run: |
          cd auth
          npm test

      - name: Run tests for product
        run: |
          cd product
          npm test

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push all service images
        run: |
          docker build -t trinhvanvu/api-gateway:latest -t trinhvanvu/api-gateway:${{ github.sha }} ./api-gateway
          docker push trinhvanvu/api-gateway:latest
          docker push trinhvanvu/api-gateway:${{ github.sha }}

          docker build -t trinhvanvu/auth:latest -t trinhvanvu/auth:${{ github.sha }} ./auth
          docker push trinhvanvu/auth:latest
          docker push trinhvanvu/auth:${{ github.sha }}

          docker build -t trinhvanvu/order:latest -t trinhvanvu/order:${{ github.sha }} ./order
          docker push trinhvanvu/order:latest
          docker push trinhvanvu/order:${{ github.sha }}

          docker build -t trinhvanvu/product:latest -t trinhvanvu/product:${{ github.sha }} ./product
          docker push trinhvanvu/product:latest
          docker push trinhvanvu/product:${{ github.sha }}

  deploy:
    name: Deploy on Localhost (Docker Desktop)
    needs: build-and-push
    runs-on: self-hosted

    steps:
      - name: Deploy with Docker Compose
        run: |
          cd "D:\DAIHOC\NAM4\TAILIEU\LTHDV\THUCHANH\22685821-TrinhVanVu-EProject1\22685821-TrinhVanVu-EProject-main"
          docker-compose down --remove-orphans
          docker-compose pull
          docker-compose up -d
          docker ps
